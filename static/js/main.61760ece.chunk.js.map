{"version":3,"sources":["CitySearchForm.js","Queen.js","App.js","serviceWorker.js","index.js"],"names":["CitySearchForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","autocomplete","autocomplete_listener_id","elementId","selectCityHook","handleSelectCity","onSelectCity","bind","assertThisInitialized","initAutocomplete","google","window","maps","event","removeListener","places","Autocomplete","document","getElementById","types","setFields","addListener","city","getPlace","react_default","a","createElement","id","type","placeholder","Component","Queen","queen","allStarsInfo","allStarsSeason","concat","allStarsOutcome","key","name","season","outcome","haversineDistance","latLng1","latLng2","toRad","x","Math","PI","dLat","lat","dLon","lng","sin","cos","atan2","sqrt","App","params","state","closest","errorMessage","userCity","queenCities","Array","from","Set","queens","map","q","hometown","userLatLng","geometry","location","toJSON","closestCityName","minBy","c","cityCoords","console","error","Infinity","setState","distance","_this2","queensList","closestQueens","filter","alphabetical","sortBy","round","className","CitySearchForm_CitySearchForm","Boolean","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61760ece.chunk.js","sourcesContent":["/*\n * An address search form that only includes cities in the autocomplete and result\n */\nimport React, { Component } from \"react\";\n\n/* Google Maps Autocomplete widget that returns cities\n\nThis is tightly coupled to the App. Only one can exist\non a page because the `id` of the input is hard coded,\nand it only fetches elements it knows are needed by\nthe App to find closest queens and display the city.\n\nIn addition, you must make sure to include\n<script type=\"text/javascript\" src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\"></script> on the page before this element in\norder to populate google.maps.places in the\nglobal namespace.\n*/\nexport default class CitySearchForm extends Component {\n  /*\n        props.handleSelectCity - function(google.maps.places.PlaceResult). A function\n            which accepts a PlaceResult object with formatted_address and geography\n            fields populated. This will be called when the user selects an address\n            on the form.\n    */\n  constructor(props) {\n    super(props);\n    this.autocomplete = null;\n    this.autocomplete_listener_id = null;\n    this.elementId = \"citySearchAutocomplete\";\n    this.selectCityHook = props.handleSelectCity;\n\n    // bind callbacks to class\n    this.onSelectCity = this.onSelectCity.bind(this);\n    this.initAutocomplete = this.initAutocomplete.bind(this);\n  }\n\n  /* Attach the Google Maps Autocomplete widget to our input */\n  componentDidMount() {\n    this.initAutocomplete();\n  }\n\n  /* Unregister our place_changed handler */\n  componentWillUnmount() {\n    const google = window.google;\n    if (this.autocomplete_listener_id) {\n      google.maps.event.removeListener(this.autocomplete_listener_id);\n    }\n  }\n\n  /* Initializes our Google Maps Autocomplete widget */\n  initAutocomplete() {\n    const google = window.google;\n    this.autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById(this.elementId),\n      {\n        // only allow selecting cities and towns\n        types: [\"(cities)\"]\n      }\n    );\n\n    // Limit our results fields to _exactly_ what we need\n    // to avoid getting billed for extra.\n    this.autocomplete.setFields([\n      // The lat/lng of the city. Can be used\n      // to calculate distance from the lat/lng\n      // of Queen's cities to find the closest.\n      \"geometry\"\n    ]);\n    this.autocomplete_listener_id = this.autocomplete.addListener(\n      \"place_changed\",\n      this.onSelectCity\n    );\n  }\n\n  /* Pass the Google Place object back to the controlling object */\n  onSelectCity() {\n    // This relies on the `setFields` call in the constructor to limit\n    // the fields in our result to `['formatted_address', 'geometry']`\n    const city = this.autocomplete.getPlace();\n    this.selectCityHook(city);\n  }\n\n  render() {\n    return (\n      <form>\n        {/* Uncontrolled input used by the autocomplete object*/}\n        <input id={this.elementId} type=\"text\" placeholder=\"Enter your city\" />\n      </form>\n    );\n  }\n}\n","/*\n * Yaaas - it's a Queen (in the results list)!\n */\nimport React from \"react\";\n\nconst Queen = queen => {\n  const allStarsInfo = queen.allStarsSeason\n    ? `| ${queen.allStarsSeason}, ${queen.allStarsOutcome}`\n    : null;\n\n  return (\n    <li key={queen.name}>\n      {queen.name} | {queen.season}, {queen.outcome} {allStarsInfo}\n    </li>\n  );\n};\n\nexport default Queen;\n","import React, { Component } from \"react\";\n\nimport minBy from \"lodash.minby\";\nimport sortBy from \"lodash.sortby\";\n\nimport CitySearchForm from \"./CitySearchForm.js\";\nimport Queen from \"./Queen.js\";\n\n// cityCoords were manually generated\n// using the google.maps.Geocoder in\n// the browser console.\nimport cityCoords from \"./cityCoords.json\";\nimport queens from \"./queens.json\";\n\n/* Calculates the distance as the crow flies between two points (lat/long pairs)\n\nFormula is copied from\nhttps://stackoverflow.com/questions/14560999/using-the-haversine-formula-in-javascript\n*/\nfunction haversineDistance(latLng1, latLng2) {\n  function toRad(x) {\n    return (x * Math.PI) / 180;\n  }\n\n  var R = 6371; // km\n\n  var x1 = latLng2.lat - latLng1.lat;\n  var dLat = toRad(x1);\n  var x2 = latLng2.lng - latLng1.lng;\n  var dLon = toRad(x2);\n  var a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRad(latLng1.lat)) *\n      Math.cos(toRad(latLng2.lat)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n\n  // distance in miles\n  return (d /= 1.60934);\n}\n\nclass App extends Component {\n  constructor(params) {\n    super(params);\n    this.state = {\n      closest: null,\n      errorMessage: null,\n      userCity: null\n    };\n    this.handleSelectCity = this.handleSelectCity.bind(this);\n  }\n\n  handleSelectCity(city) {\n    // Find the city above with the closest distance\n    const queenCities = Array.from(new Set(queens.map(q => q.hometown)));\n    const userLatLng = city.geometry.location.toJSON();\n    const closestCityName = minBy(queenCities, c => {\n      if (!cityCoords[c]) {\n        console.error(\n          `Missing coords for city ${c}. Make sure to add it to cityCoords.json`\n        );\n        return Infinity;\n      }\n      return haversineDistance(cityCoords[c], userLatLng);\n    });\n    this.setState({\n      userCity: city,\n      closest: {\n        distance: haversineDistance(cityCoords[closestCityName], userLatLng),\n        name: closestCityName\n      }\n    });\n  }\n\n  render() {\n    var queensList = null;\n    if (this.state.closest) {\n      const closestQueens = queens.filter(\n        q => q.hometown === this.state.closest.name\n      );\n      const alphabetical = sortBy(closestQueens, q => q.name);\n      // Treat it as an exact match if it's closer than 2m\n      const distance =\n        this.state.closest.distance < 2\n          ? \"Exact Match\"\n          : Math.round(this.state.closest.distance) + \" miles\";\n      queensList = (\n        <div id=\"results\">\n          <h2>{this.state.closest.name}</h2>\n          <em>{distance}</em>\n          <ul id=\"results-list\">{alphabetical.map(q => Queen(q))}</ul>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Tuck Town</h1>\n        </header>\n        <main>\n          <CitySearchForm handleSelectCity={this.handleSelectCity} />\n          <div id=\"results\">{queensList}</div>\n        </main>\n        <footer>{this.state.errorMessage}</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}