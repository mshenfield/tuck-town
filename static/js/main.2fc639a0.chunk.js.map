{"version":3,"sources":["lipstick.jpg","logo.svg","CitySearchForm.js","QueenCard.js","QueensList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CitySearchForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","autocomplete","autocomplete_listener_id","elementId","selectCityHook","handleSelectCity","onSelectCity","bind","assertThisInitialized","onSubmit","initAutocomplete","google","window","maps","event","removeListener","places","Autocomplete","document","getElementById","types","setFields","addListener","city","getPlace","preventDefault","react_default","a","createElement","id","type","placeholder","Component","QueenCard","queen","allStarsInfo","allStarsSeason","allStarsOutcome","className","key","name","alt","src","lipstick","season","outcome","QueensList","queens","closestCity","alphabetical","sortBy","q","distance","Math","round","map","src_QueenCard","haversineDistance","latLng1","latLng2","toRad","x","PI","dLat","lat","dLon","lng","sin","cos","atan2","sqrt","App","params","state","closest","errorMessage","userCity","queenCities","Array","from","Set","hometown","userLatLng","geometry","location","toJSON","closestCityName","minBy","c","cityCoords","console","error","concat","Infinity","setState","_this2","queensList","closestQueens","filter","src_QueensList","logo","CitySearchForm_CitySearchForm","class","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2fc639a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lipstick.47f96ac9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.cb8fe183.svg\";","/*\n * An address search form that only includes cities in the autocomplete and result\n */\nimport React, { Component } from \"react\";\n\n/* Google Maps Autocomplete widget that returns cities\n\nThis is tightly coupled to the App. Only one can exist\non a page because the `id` of the input is hard coded,\nand it only fetches elements it knows are needed by\nthe App to find closest queens and display the city.\n\nIn addition, you must make sure to include\n<script type=\"text/javascript\" src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\"></script> on the page before this element in\norder to populate google.maps.places in the\nglobal namespace.\n*/\nexport default class CitySearchForm extends Component {\n  /*\n        props.handleSelectCity - function(google.maps.places.PlaceResult). A function\n            which accepts a PlaceResult object with formatted_address and geography\n            fields populated. This will be called when the user selects an address\n            on the form.\n    */\n  constructor(props) {\n    super(props);\n    this.autocomplete = null;\n    this.autocomplete_listener_id = null;\n    this.elementId = \"citySearchAutocomplete\";\n    this.selectCityHook = props.handleSelectCity;\n\n    // bind callbacks to class\n    this.onSelectCity = this.onSelectCity.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.initAutocomplete = this.initAutocomplete.bind(this);\n  }\n\n  /* Attach the Google Maps Autocomplete widget to our input */\n  componentDidMount() {\n    this.initAutocomplete();\n  }\n\n  /* Unregister our place_changed handler */\n  componentWillUnmount() {\n    const google = window.google;\n    if (this.autocomplete_listener_id) {\n      google.maps.event.removeListener(this.autocomplete_listener_id);\n    }\n  }\n\n  /* Initializes our Google Maps Autocomplete widget */\n  initAutocomplete() {\n    const google = window.google;\n    this.autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById(this.elementId),\n      {\n        // only allow selecting cities and towns\n        types: [\"(cities)\"]\n      }\n    );\n\n    // Limit our results fields to _exactly_ what we need\n    // to avoid getting billed for extra.\n    this.autocomplete.setFields([\n      // The lat/lng of the city. Can be used\n      // to calculate distance from the lat/lng\n      // of Queen's cities to find the closest.\n      \"geometry\"\n    ]);\n    this.autocomplete_listener_id = this.autocomplete.addListener(\n      \"place_changed\",\n      this.onSelectCity\n    );\n  }\n\n  /* Pass the Google Place object back to the controlling object */\n  onSelectCity() {\n    // This relies on the `setFields` call in the constructor to limit\n    // the fields in our result to `['formatted_address', 'geometry']`\n    const city = this.autocomplete.getPlace();\n    this.selectCityHook(city);\n  }\n\n  /* Disable the normal submit on the form\n\n    This means users have to select a city from the menu - they\n    can't press enter\n  */\n  onSubmit(event) {\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        {/* Uncontrolled input used by the autocomplete object*/}\n        <input\n          id={this.elementId}\n          type=\"text\" placeholder=\"Enter a City\" />\n      </form>\n    );\n  }\n}\n","/*\n * Yaaas - it's a Queen (in the results list)!\n */\nimport React from \"react\";\n\nimport lipstick from './lipstick.jpg';\n\nconst QueenCard = (props) => {\n  const queen = props.queen;\n  const allStarsInfo = queen.allStarsSeason\n    ? (<div><br/>{queen.allStarsSeason} - {queen.allStarsOutcome}</div>)\n    : null;\n\n  return (\n    <li className=\"QueenCard\" key={queen.name}>\n      <div>\n        <div className=\"col1\">\n          <img alt=\"Pink lipstick (placeholder)\" src={lipstick}/>\n        </div>\n        <div className=\"col2and3\">\n          <h3>{queen.name}</h3>\n          {queen.season} - {queen.outcome}\n          {allStarsInfo}\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default QueenCard;\n","/*\n * The Queens result list\n */\nimport React from \"react\";\n\nimport sortBy from \"lodash.sortby\";\n\nimport QueenCard from './QueenCard.js';\n\nconst QueensList = (props) => {\n    const queens = props.queens;\n    const closestCity = props.closestCity;\n    const alphabetical = sortBy(queens, q => q.name);\n    // Treat it as an exact match if it's closer than 2m\n    const distance =\n      closestCity.distance < 2\n        ? \"Exact Match\"\n        : Math.round(closestCity.distance) + \" miles away\";\n    return (\n      <div className=\"QueensList\">\n        <h2>CLOSEST RUGIRLS</h2>\n        <h3>{closestCity.name}, {distance}</h3>\n        <ul id=\"results-list\">{alphabetical.map(q => <QueenCard key={q.name} queen={q}/>)}</ul>\n      </div>\n    );\n};\n\nexport default QueensList;\n","import React, { Component } from \"react\";\n\nimport minBy from \"lodash.minby\";\n\nimport CitySearchForm from \"./CitySearchForm.js\";\nimport QueensList from \"./QueensList.js\";\n\nimport logo from './logo.svg';\nimport './App.css';\n\n// cityCoords were manually generated\n// using the google.maps.Geocoder in\n// the browser console.\nimport cityCoords from \"./cityCoords.json\";\nimport queens from \"./queens.json\";\n\n/* Calculates the distance as the crow flies between two points (lat/long pairs)\n\nFormula is copied from\nhttps://stackoverflow.com/questions/14560999/using-the-haversine-formula-in-javascript\n*/\nfunction haversineDistance(latLng1, latLng2) {\n  function toRad(x) {\n    return (x * Math.PI) / 180;\n  }\n\n  var R = 6371; // km\n\n  var x1 = latLng2.lat - latLng1.lat;\n  var dLat = toRad(x1);\n  var x2 = latLng2.lng - latLng1.lng;\n  var dLon = toRad(x2);\n  var a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRad(latLng1.lat)) *\n      Math.cos(toRad(latLng2.lat)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n\n  // distance in miles\n  return (d /= 1.60934);\n}\n\nclass App extends Component {\n  constructor(params) {\n    super(params);\n    this.state = {\n      closest: null,\n      errorMessage: null,\n      userCity: null\n    };\n    this.handleSelectCity = this.handleSelectCity.bind(this);\n  }\n\n  handleSelectCity(city) {\n    // Find the city above with the closest distance\n    const queenCities = Array.from(new Set(queens.map(q => q.hometown)));\n    const userLatLng = city.geometry.location.toJSON();\n    const closestCityName = minBy(queenCities, c => {\n      if (!cityCoords[c]) {\n        console.error(\n          `Missing coords for city ${c}. Make sure to add it to cityCoords.json`\n        );\n        return Infinity;\n      }\n      return haversineDistance(cityCoords[c], userLatLng);\n    });\n    this.setState({\n      userCity: city,\n      closest: {\n        distance: haversineDistance(cityCoords[closestCityName], userLatLng),\n        name: closestCityName\n      }\n    });\n  }\n\n  render() {\n    var queensList = null;\n    if (this.state.closest) {\n      const closestQueens = queens.filter(\n        q => q.hometown === this.state.closest.name\n      );\n      queensList = (<QueensList\n        closestCity={this.state.closest}\n        queens={closestQueens}\n      />);\n    }\n\n    return (\n      <div>\n        <div className=\"HeroImage\">\n          <div className=\"HeroImage-content\">\n            <nav>\n              <img alt=\"Tuck Town logo\" className=\"logo\" src={logo} />\n            </nav>\n            <div className=\"Separator\"/>\n            <div className=\"HeroImage-cta\">\n              <header>\n                <h1>Find the Closest Rupaul’s Drag Race Queen!</h1>\n              </header>\n              <CitySearchForm className=\"CitySearchForm\" handleSelectCity={this.handleSelectCity} />\n            </div>\n          </div>\n        </div>\n        <main>\n          <div class=\"Content\">\n            {queensList}\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}