{"version":3,"sources":["CitySearchForm.js","Queen.js","App.js","serviceWorker.js","index.js"],"names":["CitySearchForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","autocomplete","autocomplete_listener_id","elementId","selectCityHook","handleSelectCity","onSelectCity","bind","assertThisInitialized","initAutocomplete","google","window","maps","event","removeListener","places","Autocomplete","document","getElementById","types","componentRestrictions","country","setFields","addListener","city","getPlace","react_default","a","createElement","id","type","placeholder","Component","Queen","queen","key","name","seasons","join","outcome","QUEEN_CITIES","Array","from","Set","queens","map","q","hometown","App","params","state","closestCityInfo","errorMessage","userCity","handleDistanceMatrixResponse","_this2","setState","closest","service","DistanceMatrixService","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","cityChunk","value","getDistanceMatrix","origins","formatted_address","destinations","travelMode","unitSystem","UnitSystem","IMPERIAL","response","status","_iterator","chunk","Symbol","iterator","next","done","err","return","console","error","startingValue","ix","result","accumulator","isOriginal","rows","elements","reduce","distance","destinationAddresses","hometownish","text","_this3","queensList","closestQueens","filter","alphabetical","sortBy","className","CitySearchForm_CitySearchForm","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8714dcf6.chunk.js","sourcesContent":["/*\n * An address search form that only includes cities in the autocomplete and result\n */\nimport React, { Component } from \"react\";\n\n/* Google Maps Autocomplete widget that returns cities\n\nThis is tightly coupled to the App. Only one can exist\non a page because the `id` of the input is hard coded,\nand it only fetches elements it knows are needed by\nthe App to find closest queens and display the city.\n\nIn addition, you must make sure to include\n<script type=\"text/javascript\" src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\"></script> on the page before this element in\norder to populate google.maps.places in the\nglobal namespace.\n*/\nexport default class CitySearchForm extends Component {\n  /*\n        props.handleSelectCity - function(google.maps.places.PlaceResult). A function\n            which accepts a PlaceResult object with formatted_address and geography\n            fields populated. This will be called when the user selects an address\n            on the form.\n    */\n  constructor(props) {\n    super(props);\n    this.autocomplete = null;\n    this.autocomplete_listener_id = null;\n    this.elementId = \"citySearchAutocomplete\";\n    this.selectCityHook = props.handleSelectCity;\n\n    // bind callbacks to class\n    this.onSelectCity = this.onSelectCity.bind(this);\n    this.initAutocomplete = this.initAutocomplete.bind(this);\n  }\n\n  /* Attach the Google Maps Autocomplete widget to our input */\n  componentDidMount() {\n    this.initAutocomplete();\n  }\n\n  /* Unregister our place_changed handler */\n  componentWillUnmount() {\n    const google = window.google;\n    if (this.autocomplete_listener_id) {\n      google.maps.event.removeListener(this.autocomplete_listener_id);\n    }\n  }\n\n  /* Initializes our Google Maps Autocomplete widget */\n  initAutocomplete() {\n    const google = window.google;\n    this.autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById(this.elementId),\n      {\n        // only allow selecting cities and towns\n        types: [\"(cities)\"],\n        // For now, restrict results to the U.S. so\n        // there is some kind of computable, drivable\n        // route. The way the call to Distance Matrix\n        // is structured right now means we'll only\n        // return a result if it can be driven to.\n        componentRestrictions: { country: \"us\" }\n      }\n    );\n\n    // Limit our results fields to _exactly_ what we need\n    // to avoid getting billed for extra.\n    this.autocomplete.setFields([\n      // The formatted address can be used directly as\n      // an input to the Maps Distance Matrix API\n      \"formatted_address\"\n    ]);\n    this.autocomplete_listener_id = this.autocomplete.addListener(\n      \"place_changed\",\n      this.onSelectCity\n    );\n  }\n\n  /* Pass the Google Place object back to the controlling object */\n  onSelectCity() {\n    // This relies on the `setFields` call in the constructor to limit\n    // the fields in our result to `['formatted_address', 'geometry']`\n    const city = this.autocomplete.getPlace();\n    this.selectCityHook(city);\n  }\n\n  render() {\n    return (\n      <form>\n        {/* Uncontrolled input used by the autocomplete object*/}\n        <input id={this.elementId} type=\"text\" placeholder=\"Enter your city\" />\n      </form>\n    );\n  }\n}\n","/*\n * Yaaas - it's a Queen (in the results list)!\n */\nimport React from \"react\";\n\nconst Queen = queen => {\n  return (\n    <li key={queen.name}>\n      {queen.name} | {queen.seasons.join(\", \")} | {queen.outcome}\n    </li>\n  );\n};\n\nexport default Queen;\n","import React, { Component } from \"react\";\nimport chunk from \"lodash.chunk\";\nimport sortBy from \"lodash.sortby\";\n\nimport CitySearchForm from \"./CitySearchForm.js\";\nimport Queen from \"./Queen.js\";\n\nimport queens from \"./queens.json\";\n\nconst QUEEN_CITIES = Array.from(new Set(queens.map(q => q.hometown)));\n\nclass App extends Component {\n  constructor(params) {\n    super(params);\n    this.state = {\n      closestCityInfo: null,\n      errorMessage: null,\n      userCity: null\n    };\n    this.handleSelectCity = this.handleSelectCity.bind(this);\n    this.handleDistanceMatrixResponse = this.handleDistanceMatrixResponse.bind(\n      this\n    );\n  }\n\n  handleSelectCity(city) {\n    // Reset so calculations in handleDistanceMatrixResponse work\n    this.setState({ closest: null });\n    // From script in index.html\n    const google = window.google;\n    const service = new google.maps.DistanceMatrixService();\n    // At most we can only pass in 25 destinations at a time\n    // We reduce the results in handleDistanceMatrixResponse\n    for (const cityChunk of chunk(QUEEN_CITIES, 25)) {\n      service.getDistanceMatrix(\n        {\n          origins: [city.formatted_address],\n          destinations: cityChunk,\n          travelMode: \"DRIVING\",\n          // I'm assuming most of our audience is U.S.\n          unitSystem: google.maps.UnitSystem.IMPERIAL\n        },\n        (response, status) =>\n          this.handleDistanceMatrixResponse(cityChunk, response, status)\n      );\n    }\n    this.setState({ userCity: city });\n  }\n\n  handleDistanceMatrixResponse(cityChunk, response, status) {\n    if (status !== \"OK\") {\n      this.setState({\n        errorMessage:\n          \"There was a problem retrieving the closest queens - please try again later.\"\n      });\n      console.error(response, status);\n      return;\n    }\n    // Results are in a format like\n    //\n    //  {\n    //    rows: [\n    //    // Distance from user selected city to FIRST element in QUEENS_CITY\n    //    { ... },\n    //    // Distance from user selected city to SECOND element in QUEENS_CITY\n    //    { ... },\n    //    ...\n    //  }\n    //\n    // We iterate to find the index of the item in `rows` with the smallest\n    // distance.\n    var startingValue = { ix: null, result: null };\n    if (this.state.closest) {\n      startingValue = this.state.closest.accumulator;\n      startingValue.isOriginal = true;\n    }\n\n    const results = response.rows[0].elements;\n    const closest = results.reduce((closest, result, ix) => {\n      if (result.status !== \"OK\") {\n        return closest;\n      }\n      if (\n        closest.ix === null ||\n        result.distance.value < closest.result.distance.value\n      ) {\n        return { ix: ix, result: result };\n      }\n\n      return closest;\n    }, startingValue);\n    if (closest.isOriginal) {\n      // This was the same value we started with\n      return;\n    }\n\n    this.setState({\n      closest: {\n        // Use the formatted_address, prettier than what we get in the Queen data\n        name: response.destinationAddresses[closest.ix],\n        // The version as it appears in the Queens data\n        hometownish: cityChunk[closest.ix],\n        distance: closest.result.distance.text,\n        accumulator: closest\n      }\n    });\n  }\n\n  render() {\n    var queensList = null;\n    if (this.state.closest) {\n      const closestQueens = queens.filter(\n        q => q.hometown === this.state.closest.hometownish\n      );\n      const alphabetical = sortBy(closestQueens, q => q.name);\n      queensList = (\n        <div id=\"results\">\n          <h2>{this.state.closest.name}</h2>\n          <em>{this.state.closest.distance}</em>\n          <ul id=\"results-list\">{alphabetical.map(q => Queen(q))}</ul>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Tuck Town</h1>\n        </header>\n        <main>\n          <CitySearchForm handleSelectCity={this.handleSelectCity} />\n          <div id=\"results\">{queensList}</div>\n        </main>\n        <footer>{this.state.errorMessage}</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}